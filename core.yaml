openapi: 3.0.1
info:
  title: TalentTech platform API
  description: |
    Публичное API платформы TalentTech.
  contact:
    email: support@talenttech.ru
  version: 1.0.0
externalDocs:
  description: TalentTech
  url: 'https://talenttech.ru'
servers:
  - url: 'https://integration.api.talenttech.ru/core/v1'
tags:
  - name: Auth
    description: |
      Получение аутентификационного токена
  - name: User
    description: |
      Управление пользователями
  - name: Team
    description: |
      Управление организационной структурой компании
  - name: Position
    description: |
      Подраздел организационной структуры для управления штатными должностями
  - name: DP
    description: |
      Данные цифрового профиля
security:
  - ttAuth: []

paths:
  '/auth/authorize':
    post:
      security: []
      tags:
        - Auth
      summary: Получение токена для API вызовов
      description: >
        Отправка JWT токена сфоромированого с правилами описанными в документации
        для получения токена необходимого для авторизации API вызовов.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                token:
                  description: Токен подписанный приватным ключом
                  type: string
      responses:
        '201':
          description: Токен создан
          content:
            application/json:
              schema:
                type: object
                properties:
                  token:
                    type: string
        '403':
          description: Ошибка доступа (информация об ошибке будет в ответе)
          content: {}

  '/user':
    post:
      tags:
        - User
      summary: Создать пользователя
      description: >
        Операция создаёт пользователя. При создании пользователя необходимо
        указать его табельный номер иначе пользователь не будет создан.

        **Скоуп: user:write**
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                pernr:
                  description: Табельный номер сотрудника
                  type: string
      responses:
        '204':
          description: Пользователь создан

  '/user/{pernr}/metadata':
    put:
      tags:
        - User
      summary: 'Обновить личную информацию'
      description: >
        Операция обновляет личную информацию пользователя.


        **Скоуп: user:write**
      parameters:
        - name: pernr
          in: path
          description: Табельный номер
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
            application/json:
              schema:
                $ref: '#/components/schemas/metadata'
      responses:
        '204':
          description: Личная информация обновлена
        '404':
          description: Пользователь не найден

  '/user/{pernr}/picture':
    post:
      tags:
        - User
      summary: 'Загрузить изображение пользователя'
      description: >
        Операция загружает изображение пользователя.


        **Скоуп: user:write**
      parameters:
        - name: pernr
          in: path
          description: Табельный номер
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
            multipart/form-data:
              schema:
                type: object
                properties:
                  file:
                    type: string
                    format: binary
      responses:
        '204':
          description: Изображение пользователя загружено
        '404':
          description: Пользователь не найден

  '/user/{pernr}/disable':
    put:
      tags:
        - User
      summary: Заблокировать пользователя в компании
      description: >
        Блокировка пользователя деактивирует все учётные данные пользователя
        которые принадлежат данной компании. Если пользователь имеет другие
        возможности входа, то он сможет войти в систему.  Долнительно блокировка
        пользователя, снимает его со всех позиций на которых пользователь
        находится. Т.е. если после блокировки его обратно разблокировать, то его
        будет необходимо добавить на позиции в командах иначе он не сможет
        полноценно пользоваться системой.


        **Скоуп: user:write**
      parameters:
        - name: pernr
          in: path
          description: Табельный номер
          required: true
          schema:
            type: string
      responses:
        '204':
          description: Пользователь заблокирован
        '404':
          description: Пользователь не найден

  '/user/{pernr}/enable':
    put:
      tags:
        - User
      summary: Разблокировать пользователя в компании
      description: >
        Обратно активирует все доступные пользователю способы аутентификации в
        рамках текущей компании. Внимание: пользователя необходимо добавить на
        занимаемую позицию иначе он сможет войти, но не сможет действовать от лица
        компании на платформе (использовать модули).


        **Скоуп: user:write**
      parameters:
        - name: pernr
          in: path
          description: Табельный номер
          required: true
          schema:
            type: string
      responses:
        '204':
          description: Пользователь разблокирован
        '404':
          description: Пользователь не найден

  '/user/{pernr}/auth':
    post:
      tags:
        - User
      summary: Добавляет способ аутентификации пользователя
      description: >
        У каждого пользователя может быть неограниченное количество способов
        аутентификации.

        Данный метод позволяет добавить способ аутентификации для пользователя.

        Способ аутентификации который создаётся в рамках этого вызова,
        ассооциирован с компанией в рамках которой был осуществлён вызов. В
        случае если где-то уже были использованы учётные данные будет ошибка.


        **Скоуп: auth:write**
      parameters:
        - name: pernr
          in: path
          description: Табельный номер
          required: true
          schema:
            type: string
        - name: auth
          in: query
          required: true
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/auth'
      responses:
        '204':
          description: Способ аутентификации добавлен
        '409':
          description: Способ конфликтует с имеющимся. Никаких изменений не произведено.

    get:
      tags:
        - User
      summary: Получить список способов аутентификации
      description: >
        Возвращает список способов аутентификации пользователя в рамках текущей
        компании.


        **Скоуп: user:read**
      parameters:
        - name: userid
          in: path
          description: Идентификатор пользователя
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Ok
          content:
            application/json:
              schema:
                type: array
                items:
                  properties:
                    type:
                      type: string
                      description: Способ аутентификации
                      enum:
                        - EMAIL
                        - PHONE
                    value:
                      type: string
                      description: 'Значение способа аутентификации (телефон, email и т.д.)'
                    active:
                      type: boolean
                      description: Признак активности аккаунта
        '404':
          description: >-
            Не найден пользователь или у него нет аутентификационных данных
            компании
    delete:
      tags:
        - User
      summary: Удалить способ аутентификации
      description: >
        Удаляет способ аутентификации пользователя. Больше пользователь не
        сможет аутентифицироваться с этим способом. Внимание: если пользователь
        был аутентифицирован этим способом, то все его сессии аннулируются!


        **Скоуп: auth:write**
      parameters:
        - name: userid
          in: path
          description: Идентификатор пользователя
          required: true
          schema:
            type: string
            format: uuid
        - name: auth
          in: query
          required: true
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/auth'
      responses:
        '204':
          description: Способ заблокирован
        '404':
          description: Не найден пользователь

  '/user/{pernr}/auth/disable':
    put:
      tags:
        - User
      summary: Заблокировать способ входа
      description: >
        Выключает способ аутентификации пользователя. Если способ выключен - то не
        делает ничего. Если пользователь имеет активные сессии в которых был
        аутентифицирован данным способом - они будут аннулированны.


        **Скоуп: auth:write**
      parameters:
        - name: pernr
          in: path
          description: Табельный номер
          required: true
          schema:
            type: string
        - name: auth
          in: query
          required: true
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/auth'
      responses:
        '204':
          description: Способ разблокирован
        '404':
          description: Не найден пользователь или способ аутентификации

  '/user/{pernr}/auth/enable':
    put:
      tags:
        - User
      summary: Разблокировать способ входа
      description: >
        Включает способ аутентификации пользователя. Если способ включен - то не
        делает ничего.


        **Скоуп: auth:write**
      parameters:
        - name: pernr
          in: path
          description: Табельный номер
          required: true
          schema:
            type: string
        - name: auth
          in: query
          required: true
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/auth'
      responses:
        '204':
          description: Способ разблокирован
        '404':
          description: Не найден пользователь или способ аутентификации

  '/team':
    post:
      tags:
        - Team
      summary: Создать/обновить команду в компании
      description: >
        Создаёт или измеяет команду в оргструктуре организации. Может быть
        указан id предыдущей команды(команд) если команда создася при помощи
        слияния или ветвления. В случае создания команды с указанием предыдущих
        ID все позиции из предыдущих команд автоматически переносятся в новую
        команду. Если в ID передаётся активная команда то фактически будет
        выполнение обновление данных команды.


        **Скоуп: team:write**
      requestBody:
        required: true
        content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: string
                    description: >
                      Идентификатор команды. Должен быть уникальным для
                      компании, задаётся тем кто создаёт команду.
                  name:
                    type: string
                    description: Название команды
                  parent_id:
                    type: string
                    description: Идентификатор родительской команды
                  prev_id:
                    type: array
                    description: Деактивировать и перенести позиции из старых команды
                    items:
                      type: string

      responses:
        '204':
          description: Операция удачно выполнена
        '422':
          description: Ошибка

    get:
      tags:
        - Team
      summary: Корневой список команд
      description: >
        Выводит корневой список команд в компании. Для вывода дочерних команд
        нужно использовать вызов: GET /team/{teamid}


        **Скоуп: team:read**
      responses:
        '200':
          description: Список команд
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    id:
                      description: Идентификатор команды
                      type: string
                    name:
                      description: Название команды
                      type: string

  '/team/{teamid}':
    get:
      tags:
        - Team
      summary: Детальные данные команды
      description: |
        Возвращает данные команды и список дочерних команд.


        **Скоуп: team:read**
      parameters:
        - name: teamid
          in: path
          description: Идентификатор команды
          required: true
          schema:
            type: string
      responses:
        '200':
          description: ок
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/team'
        '404':
          description: Команда не найдена или не активна

  '/team/{teamid}/deactivate':
    put:
      tags:
        - Team
      summary: Деактивация команды
      description: >
        Метод деактивирует команду. Команду невозможно активировать повторно.
        Для возобновления команды требуется создать новую команду и указать
        эту в качестве источника, либо просто создать новую команду.


        **Скоуп: team:write**
      parameters:
        - name: teamid
          in: path
          description: Идентификатор команды
          required: true
          schema:
            type: string
      responses:
        '204':
          description: Команда деактивирована
        '404':
          description: Команда не найдена или не активна

  '/team/{teamid}/position':
    post:
      tags:
        - Position
      summary: Создать позицию
      description: |
        Создание позиции в определённой команде. Если требуется сменить
        команду позиции, то воспользуйтесь методом перемещения позиции.


        **Скоуп: team:write**
      parameters:
        - name: teamid
          in: path
          description: Идентификатор команды
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    description: >
                      Идентификатор позиции. Должен быть уникальным
                      в рамках компани.
                    type: string
                  name:
                    description: Идентификатор позиции
                    type: string
      responses:
        '204':
          description: Позиция создана

    get:
      tags:
        - Position
      summary: Список позиций в команде
      description: >
        Данный метод возвращает полный список позиций в текущей команде
        переданной в запросе.
        Позиции возвращаются по 100 штук, смещение указывается в параметре
        offset, если смещение выходит за пределы, то возвращается пустой
        массив объектов, без ошибок.


        **скоуп: team:read**
      parameters:
        - name: teamid
          in: path
          description: Идентификатор команды
          required: true
          schema:
            type: string
        - name: offset
          in: query
          description: >
            Смещение от начала. Если позиций больше нет то вернётся пустой массив.
          required: false
          schema:
            type: integer
      responses:
        '404':
          description: Команда не найдена
        '200':
          description: Список позиций в ответе
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/position'

  '/team/position/{positionid}':
    get:
      tags:
        - Position
      summary: Получить позицию
      description: |
        Получение информации о позиции.


        **Скоуп: team:read**
      parameters:
        - name: positionid
          in: path
          description: Идентификатор позиции
          required: true
          schema:
            type: string
      responses:
        '404':
          description: Позиция не найдена
        '200':
          description: ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/position'
    put:
      tags:
        - Position
      summary: Обновить позицию
      description: >
        Обновление данных позиции. В случае передачи нулевого id
        пользователя, позици становится вакантной, а пользователь который был на
        ней до этого, удаляется с позиции.


        Если указать идентификатор команды, то произойдет перемещение позиции между командами.
        При этом все связи позиции с другими позициями, а также пользователь который находится на позиции
        остаются без изменений


        **Скоуп: team:write**
      parameters:
        - name: positionid
          in: path
          description: Идентификатор позиции
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  description: Название позиции
                  type: string
                pernr:
                  description: Табельный номер сотрудника
                  type: string
                teamid:
                  description: Идентификатор команды
                  type: string

      responses:
        '404':
          description: Не найдена позиция, пользователь и/или команда
        '204':
          description: Позиция обновлена

    delete:
      tags:
        - Position
      summary: Удалить позицию
      description: |
        Удаление позиции.


        **Скоуп: team:write**
      parameters:
        - name: positionid
          in: path
          description: Идентификатор позиции
          required: true
          schema:
            type: string
      responses:
        '204':
          description: Позиция удалена

  '/team/positionlink':
    put:
      tags:
        - Position
      summary: 'Связать с позицией'
      description: >
        Операция связывает одну позицию с другой.


        **Скоуп: team:write**
      requestBody:
        required: true
        content:
            application/json:
              schema:
                properties:
                  from_positionid:
                    type: string
                  to_positionid:
                    type: string
                  role:
                    type: string
                    description: Тип связи
                    enum:
                     - CHIEF
      responses:
        '204':
          description: Связь установлена
        '404':
          description: Штатные должности не надены
        '422':
          description: Ошибка в параметрах запроса

    delete:
      tags:
        - Position
      summary: 'Удалить связь между позициями'
      description: >
        Операция удаляет связь одной позиции с другой.


        **Скоуп: team:write**
      requestBody:
        required: true
        content:
            application/json:
              schema:
                properties:
                  from_positionid:
                    type: string
                  to_positionid:
                    type: string
      responses:
        '204':
          description: Связь удалена
        '404':
          description: Штатные должности не найдены

  '/dp':
    post:
      tags:
        - DP
      summary: 'Отправить данные цифрового профиля'
      description: >
        Платформа ТТ позволяет строить цифровые профили сотрудников.
        Для отправки данных для построения цифрого профиля необходимо
        согласовать следующую информацию:
          - Тип сообщения
          - Полезную нагрузку сообщения


        **Скоуп: dp:write**
      requestBody:
        required: true
        content:
          application/json:
            schema:
              properties:
                type:
                  type: string
                  description: Тип сообщения
                payload:
                  type: object
                  description: Полезная нагрузка
                  example: { key1: value1, key2: value2, ...: ... }
      responses:
        '204':
          description: Данные добавлены
        '422':
          description: Неверные параметры запросы

components:
  schemas:
    auth:
      type: object
      properties:
        type:
          type: string
          description: Способ аутентификации
          enum:
            - EMAIL
            - PHONE
        value:
          type: string
          description: 'Значение способа аутентификации (телефон, email и т.д.)'
    team:
      type: object
      properties:
        id:
          type: string
          description: >
            Идентификатор команды. Это внешний ключ который идентифицирует
            команду внутри внешней системы.
        name:
          type: string
        children:
          type: array
          items:
            type: object
            description: Список дочерних команд
            properties:
              id:
                description: Идентификатор команды
                type: string
              name:
                description: Имя команды
                type: string

    position:
      type: object
      properties:
        id:
          description: Идентификатор позиции
          type: string
        teamid:
          description: Идентификатор команды
          type: string
        name:
          type: string
          description: Имя позиции
        pernr:
          type: string
          description: Табельный номер сотрудника
    metadata:
      type: object
      properties:
        first_name:
          type: string
          description: Имя
        last_name:
          type: string
          description: Фамилия
        middle_name:
          type: string
          description: Отчество
        date_of_birth:
          type: string
          description: Дата рождения ISO_8601
        sex:
          type: string
          description: Пол ISO_5218
          enum:
            - MALE
            - FEMALE
            - NOT_APPLICABLE
  securitySchemes:
    ttAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
